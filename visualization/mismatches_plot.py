import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import data_loader as dl
import numpy as np

'''
    The function creates a tsv files to summarize modified/mismatched base for each tRNA family in each samples
    @param d:  The data object generated by data_loader.py
    @return: vd is a dataframe for mutation tsv file
             a hyperlink to download the tsv file
             distribution plot for mutation ratios and locations for each sample
'''


def getSampleDes(ID, d):
    if ID in d["sample_dic"]:
        return d["sample_dic"][ID]
    else:
        return ID


def getVariantRatioTabInFamily(d, max_ratio_cutoff=0.1, mean_read_cutoff=0, draw_fig=False):
    '''
    Some post-ranscriptional modifications on tRNAs will result in mismatches in NGS data
    The function 
        1)Generates a tsv file containing details about mismatch information for tRNA families across samples.
        2)Create bar charts for the distribution of mutation ratio for each sample.
        3)Creates mismatch ratio matrix for tRNA family (mutation location vs samples).
    @param d:  The data object generated by data_loader.py
    @param tRNA_families: a list of the name of tRNA families which will show in the matrixes, if it 
                          empty all avaliable tRNA families will be shown in the matrix
    @param max_ratio_cutoff: only mismatch sites with mismatch ratio above the cutoff in at 
                            least one sample will be repoted
    @param mean_read_cutoff: The minimal of mean read number across samples to 
                            filter out sites with very few reads
    @param draw_fig: whether draw bar charts for distribution of mutation ratio for each sample
    @param test: If test is true, only draw three matrixes for testing.
    @return: None
    '''
    fv = pd.DataFrame(
        columns=['sample', 'family', 'loc', 'RNA_IDs', 'mem_num', 'members', 'ref', 'muts', 'mut_reads', 'total_reads',
                 'ratio'])
    v = pd.read_csv(d["variants"], sep="\t")
    # Combine mutations for each tRNA, here we just sum the mutation reads and keep total_reads not change.
    gv = v.groupby(['#SampleID', 'family', 'tRNA_ID', 'loc', 'ref']).sum()
    gv['mut_reads'] = v.groupby(['#SampleID', 'family', 'tRNA_ID', 'loc', 'ref'])['mut_reads'].sum()
    gv['total_reads'] = v.groupby(['#SampleID', 'family', 'tRNA_ID', 'loc', 'ref'])['total_reads'].mean()
    gv['muts'] = v.groupby(['#SampleID', 'family', 'tRNA_ID', 'loc', 'ref'])['mut'].apply(','.join)
    gv['mut_num'] = v.groupby(['#SampleID', 'family', 'tRNA_ID', 'loc', 'ref'])['mut_reads'].apply(
        lambda x: ','.join(x.astype(int).astype(str)))
    gv = gv.reset_index()
    # print(gv)
    # Combine mutations for each tRNA family, here we just sum both the mutation reads and total_reads not change.
    fv = gv.groupby(['#SampleID', 'family', 'loc', 'ref']).sum()
    fv['mut_reads'] = gv.groupby(['#SampleID', 'family', 'loc', 'ref'])['mut_reads'].sum()
    fv['total_reads'] = gv.groupby(['#SampleID', 'family', 'loc', 'ref'])['total_reads'].sum()
    fv['ratio'] = fv['mut_reads'] / fv['total_reads']
    fv['muts'] = gv.groupby(['#SampleID', 'family', 'loc', 'ref'])['muts'].apply(','.join)
    fv['mut_num'] = gv.groupby(['#SampleID', 'family', 'loc', 'ref'])['mut_num'].apply(','.join)
    fv['tRNA_IDs'] = gv.groupby(['#SampleID', 'family', 'loc', 'ref'])['tRNA_ID'].apply(','.join)
    fv['tRNA_num'] = gv.groupby(['#SampleID', 'family', 'loc', 'ref'])['tRNA_ID'].count()
    fv['uni_reads'] = fv['mut_num'].apply(lambda x: len(set(x.split(','))))
    fv = fv.reset_index()

    # Explain for transform https://pbpython.com/pandas_transform.html#:~:text=Understanding%20the%20Transform%20Function%20in%20Pandas%201%20Introduction.,...%204%20Second%20Approach%20-%20Using%20Transform.%20
    fv['ratio_max'] = fv.groupby(['family', 'loc', 'ref'])['ratio'].transform('max')
    fv['mut_read_mean'] = fv.groupby(['family', 'loc', 'ref'])['mut_reads'].transform('mean')

    # Delete -1 rows
    fv = fv.loc[fv['loc'] >= 0]
    # Filter matrix
    fv = fv.loc[fv['ratio_max'] >= max_ratio_cutoff][fv['mut_read_mean'] >= mean_read_cutoff]
    # Add sample discription
    fv['SampleDes'] = fv['#SampleID'].apply(getSampleDes, d=d)
    # Draw mutation matrix

    print("Download tsv here:")
    dl.csv_download_link(fv, 'family_mut.tsv', delete_prompt=False)
    if draw_fig:
        sns.reset_defaults()
        g = sns.FacetGrid(fv, row="SampleDes", height=1.7, aspect=4)
        g.map(sns.distplot, 'ratio', kde=False, bins=20)
        axes = g.axes.flatten()
        index =0
        for ax in axes:
            #ax.set_title(fv['SampleDes'][index])
            #ax.set_xlabel('Mismatch Ratio')
            ax.set_ylabel('Site Number')
            index+=1
        #g.ax_joint.set(xlabel="Ratio", ylabel="Numbers")
        plt.xlim(0, 1)
        plt.figure()
        g = sns.FacetGrid(fv, row="SampleDes", height=1.7, aspect=4)
        g.map(sns.distplot, 'loc', kde=False, bins=75)
        #g.ax_joint.set(xlabel="Mismatch Locations", ylabel="Numbers")
        axes = g.axes.flatten()
        index =0
        for ax in axes:
            #ax.set_title(fv['SampleDes'][index])
            #ax.set_xlabel('Mutation Locations')
            ax.set_ylabel('Site Number')
            index+=1
        plt.xlim(0, 75)
        plt.show()
    return fv

#vd = getVariantRatioTabInFamily(d)

sns.set(style="darkgrid", color_codes=True)  # {darkgrid, whitegrid, dark, white, ticks}

def drawMismatchMatrixByFamily(d, tRNA_families=[], max_ratio_cutoff=0.1, mean_read_cutoff=0, draw_fig=False, test=True):
    '''
    Some post-ranscriptional modifications on tRNAs will result in mismatches in NGS data
    The function 
        1)generates a tsv file containing details about mismatch information for tRNA families across samples.
        2)create bar charts for the distribution of mutation ratio for each sample.
        3)creates mismatch ratio matrix for tRNA family (mutation location vs samples).
        4)create two tsv files about mismatch ratio and unireads numbers matrixes (samples vs sites of tRNA families) 
    @param d:  The data object generated by data_loader.py
    @param loc_ref: The ref base on the location in tRNA
    @param loc_site_ls: a list of possible location in mature tRNA
    @param loc_name: The name of the sites which will be shown in the 
    @param row_sum_cutoff: The minimal of the sum of each row in the matrix to filter out some tRNA families with
                           limited data                
    @param tRNA_families: a list of the name of tRNA families which will show in the matrixes, if it 
                          empty all avaliable tRNA families will be shown in the matrix
    @param max_ratio_cutoff: only mismatch sites with mismatch ratio above the cutoff in at 
                            least one sample will be repoted
    @param mean_read_cutoff: The minimal of mean read number across samples to 
                            filter out sites with very few reads
    @param draw_fig: whether draw bar charts for distribution of mutation ratio for each sample
    @param test: If test is true, only draw three matrixes for testing.
    @return: None
    
    Following are some regular modification sites
    ('A', [56,57,58,59,67], A57')
    ('G', [9,10],'G9')
    ('G', [7],'G7')
    ('G', [63,64,65],'G64')
    ('A', [33,34,35],'A34')
    ('A', [36,37,38],'A37')
    ('G', [25,26,27],'G27')
'''
    vd = getVariantRatioTabInFamily(d, max_ratio_cutoff=max_ratio_cutoff, mean_read_cutoff=mean_read_cutoff, draw_fig=draw_fig)
    families_id_ls = vd['family'].unique()
    sample_des = vd['SampleDes'].unique()
    if len(families_id_ls) > 0:
        if len(tRNA_families) == 0:
            tRNA_families = families_id_ls
        if test:
            number = min(len(tRNA_families),3)
            tRNA_families =tRNA_families[:number]
        for t_family in tRNA_families:
            st_df = d['st_df']
            # print(t_family)
            sequence = st_df.loc[st_df['family'] == t_family]['full_seq'].values[0]
            # print(t_family)

            fd = vd.loc[vd['family'] == t_family]
            fd = fd.sort_values(by=['loc'])
            # print(fd['loc'])
            # print(fd)
            fd['loc_id'] = fd['loc'].map(str) + "(" + fd['ref'] + ")"
            # print(fd['loc_id'])
            sample_ls = fd['SampleDes'].unique()
            sample_ls.sort()
            # print(sample_ls)
            uniq_loc_id_ls = fd['loc_id'].unique()
            df = pd.DataFrame(uniq_loc_id_ls, columns=['loc'])
            for s in sample_ls:
                col = [np.nan] * len(uniq_loc_id_ls)
                index = 0
                for loc_id in uniq_loc_id_ls:
                    row = fd.loc[fd['loc_id'] == loc_id][fd['SampleDes'] == s]
                    if len(row) > 0:
                        # print(row)
                        col[index] = float(row['ratio'].values[0])
                    index += 1
                df[s] = col
            df.index = df['loc']
            del df['loc']
            fwidth = len(sample_ls) * 1
            fheight = len(uniq_loc_id_ls) * 1

            fig, ax = plt.subplots(figsize=(fwidth, fheight))
            sns.heatmap(df, ax=ax, annot=True, fmt=".2f", linewidths=.1,
                        linecolor="w", square=False, cmap='cool', annot_kws={'size': 16},
                        label='Mutation Ratio', mask=df.isnull(), vmin=0, vmax=1)
            ax.set_title(t_family, fontsize=18)
            plt.xticks(fontsize=15, rotation=45, ha='right')
            plt.yticks(fontsize=15, ha='center', va='center')
            plt.xlabel('Samples', fontsize=18)
            plt.ylabel('Location', fontsize=18)
            plt.show()
    else:
        print('The matrix is empty!')
    return

# print(vd)
# drawMutationMatrixByFamily(vd, [])

def gettRNALocList(vd, ref, locs=[]):
    temp = vd[vd['ref']==ref][vd['loc'].isin(locs)]
    temp['trna_loc_id'] =temp['family']+","+temp['loc'].map(str)+"("+temp['ref']+")"
    a = list(temp['trna_loc_id'].unique())
    a.sort()
    return a

def drawMismatchMatrixByLocation(d,loc_ref,loc_site_ls, loc_name, row_sum_cutoff=0,tRNA_families=[],
                         max_ratio_cutoff=0.1, mean_read_cutoff=0, draw_fig=False, test=True):
    vd = getVariantRatioTabInFamily(d, max_ratio_cutoff=max_ratio_cutoff, mean_read_cutoff=mean_read_cutoff, draw_fig=draw_fig)
    trna_loc_ls = gettRNALocList(vd, loc_ref, loc_site_ls)
    families_id_ls = vd['family'].unique()
    sample_des = vd['SampleDes'].unique()
    if len(families_id_ls)>0:
        if len(tRNA_families)==0:
            tRNA_families = families_id_ls
            if test:
                number = min(len(tRNA_families),3)
                tRNA_families =tRNA_families[:number]
            vd['trna_loc_id'] = vd['family']+","+vd['loc'].map(str)+"("+vd['ref']+")"
            #print(fd['loc_id'])
            sample_ls = vd['SampleDes'].unique()
            sample_ls.sort()
            #print(sample_ls)
            df = pd.DataFrame(trna_loc_ls, columns=['trna_loc'])
            mask_df = pd.DataFrame(trna_loc_ls, columns=['trna_loc'])
            for s in sample_ls:
                col = [0]*len(trna_loc_ls)
                mask_col = [0]*len(trna_loc_ls)
                index = 0
                for loc_id in trna_loc_ls:
                    row = vd.loc[vd['trna_loc_id']==loc_id][vd['SampleDes']==s]
                    if len(row)>0:
                        #print(row)
                        col[index]=float(row['ratio'].values[0])
                        mask_col[index]=float(row['uni_reads'].values[0])
                    index+=1
                df[s] = col
                mask_df[s]=mask_col
            df.index=df['trna_loc']
            df = df.loc[df.sum(axis=1)>row_sum_cutoff]
            mask_df.index=df['trna_loc']
            mask_df = mask_df.loc[df.sum(axis=1)>row_sum_cutoff]
            
            ylabels = df['trna_loc'].str.replace("TF_tRNA-","")
            trna_loc_ls = df['trna_loc']
            del df['trna_loc']
            del mask_df['trna_loc']
            dl.csv_download_link(df, loc_name+'_ratio.tsv', delete_prompt=False)
            dl.csv_download_link(mask_df, loc_name+'_unireads.tsv', delete_prompt=False)
            fwidth = (len(sample_ls)+1)*0.5
            fheight = (len(ylabels)+2)*0.5
            cbar_kws = {
            "shrink":1,
            'extend':'max', 
            'extendfrac':0.05, 
            #"ticks":np.arange(0,22), 
            #"drawedges":True,
            "location":"top",
            "use_gridspec":False
           }
            fig, ax = plt.subplots(figsize=(fwidth,fheight)) 
            ax = sns.heatmap(df, ax=ax, annot=True, fmt=".2f", linewidths=.01,yticklabels=ylabels,
                        linecolor="w", square=False, cmap='cool',
                        annot_kws={'size':10}, label='Mutation Ratio',mask=mask_df.isnull(),cbar = True,
                       vmin = 0, vmax = 1, cbar_kws=cbar_kws)
            ax.set_title(loc_name+' Mutation Ratio', fontsize=20)
            ax.yaxis.set_ticks_position("right")
            ax.yaxis.tick_right()
            #plt.tight_layout()
            plt.xticks(fontsize=12,rotation=45, ha='right')
            plt.yticks(fontsize=14, rotation=0, ha='left', va='center')
            plt.xlabel('Samples', fontsize=18)
            plt.ylabel(loc_name+' Sites', fontsize=18)
            plt.show()         
    else:
        print('The matrix is empty!')
    return