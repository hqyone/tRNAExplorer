import matplotlib.pyplot as plt
import data_loader as dl
import pandas as pd
import sys
import numpy as np
import matplotlib.patches as patches
import os

from plotly.subplots import make_subplots
import plotly.graph_objects as go

plt.rcParams['axes.facecolor'] = 'black'
pd.options.plotting.backend = "plotly"

base_color_dic = {
    "A":"r",
    "T":"g",
    "G":"y",
    "C":"b"
}

'''
    The function shows the 5' and 3' base addition modifications of tRFs.
    The function will print the top 5' and 3' addition modifications
    And draw four types/columns of pie charts:
        1. Pie charts showing the ratio of tRFs with or without 5'-Addition modification
        2. Pie charts showing the composition of 5'-Addition modifications
        3. Pie charts showing the ratio of tRFs with or without 3'-Addition modification
        4. Pie charts showing the composition of 3'-Addition modifications
    @param d: The data object generated by data_loader.py
    @param proj_name: the name of project, the default is "test", use can check the name of hit.tab file
            it follows the pattern : <sampleID>+"_"+<proj_name>+"_hit.tab"
    @param top_num: The number of top addition modifications to be printed out
    @param radius: the radius of pies
    @param fontsize: font size of the title 
    @param fig_width: the width of the figure
    @param fig_height: the height of the figure
    @return: None
'''
def getAddModificationStatisitc2(d,proj_name="test",top_num=10,fontsize=14, fig_width=600, fig_height=1200):
    proj_name = proj_name
    sample_dic = d["sample_dic"]
    s_num = len(sample_dic.keys())

    sample_ls = list(sample_dic.keys())
    sample_ls.sort()

    specs = []
    for i in sample_ls:
        specs.append([{"type": "domain"}, {"type": "domain"}, {"type": "domain"}, {"type": "domain"}])

    fig = make_subplots(
        rows=s_num, cols=4,
        specs=specs,
        column_titles=["5'_Addition_Ratio", "5'_Addition_Dist", "3'_Addition_Ratio", "3'_Addition_Dist"],
        row_titles=sample_ls,
        horizontal_spacing=0.1
    )
    total_5_df = pd.DataFrame(columns=['sample_id','sample_des','read_5_fragment','mean_number']) 
    total_3_df = pd.DataFrame(columns=['sample_id','sample_des','read_3_fragment','mean_number']) 
    s_index = 0
    for s in sample_ls:
        des = sample_dic[s]
        hit_tab = d['wdir'] + "/" + s + "_" + proj_name + "_hit.tab"
        df = pd.read_csv(hit_tab, sep="\t").fillna('-')
        if not df.empty:
            df = dl.add_aa_column(df, trna_id="tRNA_id")

            df['temp5'] = df['read_5_fragment']
            group_a = df.groupby('read_5_fragment').sum()
            #print("\n" + s + "_" + des)
            sorted_5_df = group_a.sort_values(["mean_number"], ascending=[False])
            temp = sorted_5_df
            temp = temp.reset_index()
            temp['sample_id']=s
            temp['sample_des']=des
            total_5_df = total_5_df.append(temp[['sample_id','sample_des','read_5_fragment','mean_number']], ignore_index = True)
            #sorted_5_df = sorted_5_df.head(top_num)
            
            group_c = df.groupby('read_3_fragment').sum()
            sorted_3_df = group_c.sort_values(["mean_number"], ascending=[False])
            temp = sorted_3_df
            temp = temp.reset_index()
            temp['sample_id']=s
            temp['sample_des']=des
            total_3_df = total_3_df.append(temp[['sample_id','sample_des','read_3_fragment','mean_number']], ignore_index = True) 
            #sorted_df = sorted_3_df.head(top_num)
            #dl.csv_download_link(sorted_df, 'addition_3.txt', False)
            s_index += 1
            for c in range(1, 5):
                if c == 1:
                    df['temp5'] = df['read_5_fragment']
                    df.loc[df['read_5_fragment']=='-', 'temp5'] = 'None'
                    df.loc[df['read_5_fragment']!='-', 'temp5'] = 'Addition'
                    group_b = df.groupby('temp5').sum()
                    fig.add_trace(go.Pie(values=list(group_b["mean_number"]), labels=list(group_b.index),
                                         insidetextorientation='radial'), row=s_index, col=c)
                elif c == 2:
                    group_a = df.loc[df['read_5_fragment']!='-'].groupby('read_5_fragment').sum()
                    #with pd.option_context('display.max_rows', None, 'display.max_columns',
                    #               None):  # more options can be specified also
                    #    print(group_a[['read_5_fragment',"mean_number"]])
                    fig.add_trace(
                        go.Pie(values=list(group_a["mean_number"]), hovertext=list(group_a.index), textposition='inside'),
                        row=s_index, col=c)
                elif c == 3:
                    df['temp2'] = df['read_3_fragment']
                    df.loc[df['read_3_fragment']=='-', 'temp2'] = 'None'
                    df.loc[df['read_3_fragment']!='-', 'temp2'] = 'Addition'
                    group_c = df.groupby('temp2').sum()
                    fig.add_trace(
                        go.Pie(values=list(group_c["mean_number"]), labels=list(group_c.index), textposition='inside'),
                        row=s_index, col=c)
                elif c == 4:
                    group_a = df.loc[df['read_3_fragment']!='-'].groupby('read_3_fragment').sum()
                    fig.add_trace(
                        go.Pie(values=list(group_a["mean_number"]), hovertext=list(group_a.index), textposition='inside'),
                        row=s_index, col=c)
    array = ['-', 'A', 'G', 'T', 'C', 'TG', 'TA']
    total_5_df['label'] = total_5_df['read_5_fragment'].apply(lambda x: x if x in array else 'Others')
    a = total_5_df.groupby(['sample_id', 'sample_des', 'label']).sum()
    a = a.reset_index()
    dl.csv_download_link(a, 'addition_5.tsv', False)

    dl.csv_download_link(total_3_df, 'addition_3.tsv', False)
    fig.update_layout(height=fig_height, width=fig_width, showlegend=False, font=dict(
        family="Times New Roman",
        size=fontsize,
        color="black"
    ))
    fig.show()

def getAddModificationStatisitc(d,proj_name="test",top_num=10,radius = 1.2, fontsize=14, fig_width=14):
    '''
    The function shows the 5' and 3' base addition modifications of tRFs.
    The function will print the top 5' and 3' addition modifications
    And draw four types of pie charts:
        1. A pie chart showing the ratio of tRFs with or without 5'-Addition modification
        2. A pie chart showing the composition of 5'-Addition modifications
        3. A pie chart showing the ratio of tRFs with or without 3'-Addition modification
        4. A pie chart showing the composition of 3'-Addition modifications
    @param d: The data object generated by data_loader.py
    @param proj_name: the name of project, the default is "test", use can check the name of hit.tab file
            it follows the pattern : <sampleID>+"_"+<proj_name>+"_hit.tab"
    @param top_num: The number of top addition modifications to be printed out
    @param radius: the radius of pies
    @param fontsize:
    @param fig_width:
    @return: None
    '''
    sample_dic = d["sample_dic"]
    s_num = len(sample_dic.keys())

    sample_ls = list(sample_dic.keys())
    sample_ls.sort()

    fig, axs = plt.subplots(s_num, 4, figsize=[fig_width, s_num * 3 + 2])

    index = 0
    for s in sample_ls:
        des = sample_dic[s]
        hit_tab = d['wdir'] + "/" + s + "_" + proj_name + "_hit.tab"
        df = pd.read_csv(hit_tab, sep="\t")
        if not df.empty:
            df = dl.add_aa_column(df, trna_id="tRNA_id")

            df['temp5'] = df['read_5_fragment']
            group_a = df.groupby('read_5_fragment').sum()
            axs[index, 1].pie(group_a["mean_number"], labels=group_a.index, autopct='%1.1f%%', shadow=False, radius=radius,
                              labeldistance=None)
            print("\n" + s + "_" + des)
            sorted_df = group_a.sort_values(["mean_number"], ascending=[False]).head(top_num)
            with pd.option_context('display.max_rows', None, 'display.max_columns',
                                   None):  # more options can be specified also
                print(sorted_df['mean_number'])
            group_c = df.groupby('read_3_fragment').sum()
            sorted_df = group_c.sort_values(["mean_number"], ascending=[False]).head(top_num)
            with pd.option_context('display.max_rows', None, 'display.max_columns',
                                   None):  # more options can be specified also
                print(sorted_df['mean_number'])
            axs[index, 3].pie(group_c["mean_number"], labels=group_c.index, autopct='%1.1f%%', shadow=False, radius=radius,
                              labeldistance=None)
            # axs[index,1].text(-0.06, 0.5, des, transform=axs[index,0].transAxes,va='center', fontsize=12, weight='bold', rotation=90)

            df.loc[df['temp5'].isna(), 'read_5_fragment'] = '-'
            df.loc[df['temp5'].notna(), 'read_5_fragment'] = 'Addition'
            group_b = df.groupby('read_5_fragment').sum()
            axs[index, 0].pie(group_b["mean_number"], labels=group_b.index, autopct='%1.1f%%', shadow=False, radius=radius)
            axs[index, 0].text(-0.16, 0.5, des, transform=axs[index, 0].transAxes, va='center', fontsize=fontsize,
                               weight='bold', rotation=90)

            df['temp3'] = df['read_3_fragment']
            df.loc[df['temp3'].isna(), 'read_3_fragment'] = '-'
            df.loc[df['temp3'].notna(), 'read_3_fragment'] = 'Addition'
            group = df.groupby('read_3_fragment').sum()
            axs[index, 2].pie(group["mean_number"], labels=group.index, autopct='%1.1f%%', shadow=False, radius=radius)
            if index == 0:
                axs[index, 0].text(0.2, 1.1, "5'_Addition_Ratio", transform=axs[index, 0].transAxes, va='center',
                                   fontsize=fontsize, weight='bold', rotation=0)
                axs[index, 1].text(1.4, 1.1, "5'_Addition_Comp", transform=axs[index, 0].transAxes, va='center',
                                   fontsize=fontsize, weight='bold', rotation=0)
                axs[index, 2].text(2.8, 1.1, "3'_Addition_Ratio", transform=axs[index, 0].transAxes, va='center',
                                   fontsize=fontsize, weight='bold', rotation=0)
                axs[index, 3].text(4.0, 1.1, "3'_Addition_Comp", transform=axs[index, 0].transAxes, va='center',
                                   fontsize=fontsize, weight='bold', rotation=0)
            index += 1

